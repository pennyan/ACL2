;; Copyright (C) 2015, University of British Columbia
;; Written by Yan Peng (Feb 13th 2020)
;;
;; License: A 3-clause BSD license.
;; See the LICENSE file distributed with ACL2
;;

(in-package "SMT")
(include-book "std/util/bstar" :dir :system)
(include-book "xdoc/top" :dir :system)
(include-book "std/util/define" :dir :system)
(include-book "centaur/fty/top" :dir :system)
(include-book "tools/defevaluator-fast" :dir :system)
(include-book "clause-processors/just-expand" :dir :system)
(include-book "clause-processors/generalize" :dir :system)
(include-book "clause-processors/meta-extract-user" :dir :system)
(include-book "ordinals/lexicographic-ordering-without-arithmetic" :dir :system)

(include-book "basics")
;; (include-book "alist")
(include-book "hint-please")
(include-book "typed-term")
(include-book "type-options")

(set-state-ok t)

;; This clause-processor projections a term that uses alists into a term that
;; uses arrays. Supposedly other isomorphic projectionations can also be made in
;; a similar way.

(define new-fresh-var ((current symbol-listp))
  :returns (new-var symbolp
                    :hints (("Goal" :in-theory (enable
                                                acl2::new-symbols-from-base))))
  (car (acl2::new-symbols-from-base 1 'x current)))

;; ---------------------------------------------------------------

;; (define is-alist-judge ((term pseudo-termp)
;;                         (judge pseudo-termp)
;;                         (options type-options-p))
;;   :returns (a2a maybe-a2a-info-p)
;;   :measure (acl2-count (pseudo-term-fix judge))
;;   (b* ((judge (pseudo-term-fix judge))
;;        (options (type-options-fix options))
;;        ((type-options to) options)
;;        ((if (type-predicate-of-term judge term to.supertype))
;;         (is-alist? (car judge) options))
;;        ((unless (is-conjunct? judge)) nil)
;;        ((if (equal judge ''t)) nil)
;;        ((list & judge-hd judge-tl &) judge)
;;        (hd-res (is-alist-judge term judge-hd options))
;;        ((if hd-res) hd-res))
;;     (is-alist-judge term judge-tl options)))

;; find the alist-array-equiv of term from projection
(define find-projection ((term pseudo-termp) (projection pseudo-termp))
  :returns ()
  ())

(define project-one-judge ((judge pseudo-termp)
                           (old-term pseudo-termp)
                           (new-term pseudo-termp)
                           (projection pseudo-termp)
                           (options type-options-p)
                           state)
  :returns (new-judge pseudo-termp)
  :guard (type-predicate-of-term judge old-term
                                 (type-options->supertype options))
  (b* ((judge (pseudo-term-fix judge))
       (projection (pseudo-term-fix projection))
       (options (type-options-fix options))
       ((type-options to) options)
       (yes?
        (path-test projection `(alist-array-equiv ,old-term ,new-term) state))
       ((unless yes?) judge)
       ((cons fn actuals) judge)
       (exist? (assoc-equal fn to.aa-map))
       ??
       )
    ()))

;; project judgements to using functions for arrays
(define project-judge ((judge pseudo-termp)
                       (old-term pseudo-termp)
                       (new-term pseudo-termp)
                       (projection pseudo-termp)
                       (options type-options-p)
                       state)
  :returns (new-judge pseudo-termp)
  (b* ((judge (pseudo-term-fix judge))
       (old-term (pseudo-term-fix old-term))
       (new-term (pseudo-term-fix new-term))
       (projection (pseudo-term-fix projection))
       (options (type-options-fix options))
       ((type-options to) options)
       ((if (type-predicate-of-term judge old-term to.supertype))
        (project-one-judge judge old-term new-term projection options))
       ((unless (is-conjunct? judge))
        (er hard? 'term-projection=>project-judgement
            "Judgement should be a conjunct.~%"))
       ((if (equal judge ''t)) ''t)
       ((list & judge-hd judge-tl &) judge)
       (hd-res (project-judgement judge-hd old-term new-term projection options)))
    `(if ,hd-res
         ,(project-judgement judge-tl old-term new-term projection options)
       'nil))
  )
;; ---------------------------------------------------------------

;; For a variable, if its judgement says it's an alist, the projection should
;; contain:
;;   (alist-array-equiv the-var new-var)
;; If so, generate new term using new-var, and new judgement by substituting in
;; the new term.
(define variable-projection ((tterm typed-term-p)
                            (projection pseudo-termp)
                            (options type-options-p)
                            state)
  :returns (mv (new-tt (and (typed-term-p new-tt)
                            (good-typed-term-p new-tt)))
               (new-proj pseudo-termp))
  :guard (and (good-typed-term-p tterm)
              (equal (typed-term->kind tterm) 'variablep))
  (b* (((unless (mbt (and (typed-term-p tterm)
                          (pseudo-termp projection)
                          (type-options-p options)
                          (good-typed-term-p tterm)
                          (equal (typed-term->kind tterm) 'variablep))))
        (mv (make-typed-term)
            (pseudo-term-fix projection)))
       ((typed-term tt) tterm)
       (the-proj (find-projection tt.term projection))
       ((mv err new-term)
        (case-match the-proj
          (('alist-array-equiv !tt.term new-term) (mv nil new-term))
          (& (mv t nil))))
       ((if err)
        (mv tt `(equal tt.term tt.term)))
       (new-judge (project-judge tt.judgements tt.term new-term projection
                                 options state)))
    (mv (make-typed-term :term new-term
                         :path-cond tt.path-cond
                         :judgements new-judge)
        the-proj)))

(defines term-projection
  :well-founded-relation l<
  :verify-guards nil

  (define lambda-projection ((tterm typed-term-p)
                             (path-cond pseudo-termp)
                             (projection pseudo-termp)
                             (options type-options-p)
                             state)
    :returns (mv (new-tt (and (typed-term-p new-tt)
                              (good-typed-term-p new-tt)))
                 (new-proj pseudo-termp))
    :guard (and (good-typed-term-p tterm)
                (equal (typed-term->kind tterm) 'lambdap))
    :measure (list (acl2-count (typed-term->term tterm)) 0)
    (b* (((unless (mbt (and (typed-term-p tterm)
                            (pseudo-termp path-cond)
                            (type-options-p options)
                            (pseudo-termp projection)
                            (good-typed-term-p tterm options)
                            (equal (typed-term->kind tterm) 'lambdap))))
          (mv (make-typed-term)
              (pseudo-term-fix projection)))
         ((typed-term tt) tterm)
         (formals (lambda-formals (car tt.term)))
         (tta (typed-term-lambda->actuals tterm options))
         (ttb (typed-term-lambda->body tterm options))
         ((typed-term ttt) (typed-term->top tt options))
         (shadowed-path-cond (shadow-path-cond formals path-cond))
         ((mv rtta proja)
          (term-list-projection tta path-cond projection options state))
         (new-formals (generate-new-formals ...))
         (both-actuals (append actuals rtta.term-lst))
         (both-formals (append formals new-formals))
         ((typed-term rtta) rtta)
         (substed-proja (term-substitution proja (pairlis$ both-actuals both-formals) t))
         ((mv rttb projb)
          (term-rectify ttb shadowed-path-cond substed-proja options state))

         (new-term `((lambda ,new-formals ,rttb.term) ,@rtta.term-lst))
         (new-proj (generate-lambda-proj ...))
         (new-top-judge (project-judge ttt.judgements ttt.term new-term new-proj
                                       options state))
         (new-top (make-typed-term :term new-term
                                   :path-cond path-cond
                                   :judgements new-top-judge)))
      (mv (make-typed-lambda new-top rttb rtta options)
          new-proj)))

  (define if-projection ((tterm typed-term-p)
                         (path-cond pseudo-termp)
                         (projection pseudo-termp)
                         (options type-options-p)
                         state)
    :returns (mv (new-tt (and (typed-term-p new-tt)
                              (good-typed-term-p new-tt)))
                 (new-proj pseudo-termp))
    :guard (and (good-typed-term-p tterm)
                (equal (typed-term->kind tterm) 'ifp))
    :measure (list (acl2-count (typed-term->term tterm)) 0)
    (b* (((unless (mbt (and (typed-term-p tterm)
                            (pseudo-termp path-cond)
                            (type-options-p options)
                            (pseudo-termp projection)
                            (good-typed-term-p tterm options)
                            (equal (typed-term->kind tterm) 'ifp))))
          (mv (make-typed-term)
              (pseudo-term-fix projection)))
         ((typed-term tt) tterm)
         (ttc (typed-term-if->cond tt options))
         (ttt (typed-term-if->then tt options))
         (tte (typed-term-if->else tt options))
         ((typed-term tttop) (typed-term->top tt options))
         ((mv nttc projc) (term-projection ttc path-cond projection options state))
         ((typed-term nttc) nttc)
         ((mv nttt projt)
          (term-projection ttt `(if ,(simple-transformer nttc.term) ,path-cond 'nil)
                           `(if ,projc ,projection 'nil) options state))
         ((typed-term nttt) nttt)
         ((mv ntte proje)
          (term-projection tte `(if ,(simple-transformer `(not ,nttc.term))
                                    ,path-cond 'nil)
                           projection options state))
         ((typed-term ntte) ntte)
         (new-term `(if ,nttc.term ,nttt.term ,ntte.term))
         ;; what should the new-proj be for if?
         (new-proj (generate-if-proj ...))
         (new-top-judge (project-judge tttop.judgements tttop.term new-term new-proj
                                       options state))
         (new-top (make-typed-term :term new-term
                                   :path-cond path-cond
                                   :judgements new-top-judge)))
      (mv (make-typed-if new-top nttc nttt ntte options)
          new-proj)))

  (define fncall-projection ((tterm typed-term-p)
                             (path-cond pseudo-termp)
                             (projection pseudo-termp)
                             (names symbol-listp)
                             (options type-options-p)
                             state)
    :returns (mv (new-tt (and (typed-term-p new-tt)
                              (good-typed-term-p new-tt)))
                 (new-proj pseudo-termp))
    :guard (and (good-typed-term-p tterm)
                (equal (typed-term->kind tterm) 'fncallp))
    :measure (list (acl2-count (typed-term->term tterm)) 0)
    (b* (((unless (mbt (and (typed-term-p tterm)
                            (pseudo-termp path-cond)
                            (pseudo-termp projection)
                            (type-options-p options)
                            (good-typed-term-p tterm options))))
          (mv (make-typed-term)
              (pseudo-term-fix projection)))
         ((type-options to) options)
         ((typed-term tt) tterm)
         ((typed-term-list tta) (typed-term-fncall->actuals tterm to))
         ((typed-term ttt) (typed-term->top tterm to))
         ((cons fn actuals) tt.term)
         ((if (is-alist? fn options))
          ;; do something
          (b* (((unless (and (equal (len actuals 1))
                             (symbolp (car actuals))))
                (er hard? 'term-projection=>fncall-projection
                    "We found a alist type recognizer, but its argument is not ~
                     a single variable: ~q0" tt.term))
               (var (car actuals))
               (fresh-var (new-fresh-var 1 'x names))
               ((mv new-proj new-term) (new-projection ...))
               (new-judge (project-judge tt.judgements var fresh-var new-proj
                                         options state)))
            (mv (make-typed-term :term new-term
                                 :path-cond path-cond
                                 :judgements new-judge)
                new-proj
                (cons fresh-var names))))
         (exist? (assoc-equal fn to.aa-map))
         ((mv ptta proja)
          (term-list-projection tta path-cond projection names options))
         ((typed-term ptta) ptta)
         ((mv new-term new-proj)
          (generate-fncall-proj (cdr exist?) ...))
         (new-top-judge (project-judge ttt.judgements ttt.term new-term new-proj
                                       options state))
         (new-top (make-typed-term :term new-term
                                   :path-cond path-cond
                                   :judgement new-top-judge)))
      (mv (make-typed-fncall new-top ptta to)
          new-proj)))

  (define term-projection ((tterm typed-term-p)
                           (path-cond pseudo-termp)
                           (projection pseudo-termp)
                           (names symbol-listp)
                           (options type-options-p)
                           state)
    :guard (good-typed-term-p tterm)
    :returns (mv (new-tt (and (typed-term-p new-tt)
                              (good-typed-term-p new-tt)))
                 (new-proj pseudo-termp))
    :measure (list (acl2-count (typed-term->term tterm)) 1)
    (b* (((unless (mbt (and (typed-term-p tterm)
                            (pseudo-termp path-cond)
                            (pseudo-termp projection)
                            (type-options-p options)
                            (good-typed-term-p tterm options))))
          (mv (make-typed-term)
              (pseudo-term-fix projection)))
         ((if (equal (typed-term->kind tterm) 'variablep))
          (variable-projection tterm path-cond projection names options state))
         ((if (equal (typed-term->kind tterm) 'quotep))
          (change-typed-term tterm :path-cond path-cond))
         ((if (equal (typed-term->kind tterm) 'lambdap))
          (lambda-projection tterm path-cond projection names options state))
         ((if (equal (typed-term->kind tterm) 'ifp))
          (if-projection tterm path-cond projection names options state)))
      (fncall-projection tterm path-cond projection names options state)))

  (define term-list-projection ((tterm-lst typed-term-p)
                                (path-cond pseudo-termp)
                                (projection pseudo-termp)
                                (names symbol-listp)
                                (options type-options-p)
                                state)
    :guard (good-typed-term-list-p tterm-lst)
    :returns (mv (new-tt (and (typed-term-p new-tt)
                              (good-typed-term-p new-tt)))
                 (new-proj pseudo-termp))
    :measure (list (acl2-count (typed-term-list->term-lst tterm-lst))
                   1)
    (b* (((unless (mbt (and (typed-term-list-p tterm-lst)
                            (pseudo-termp path-cond)
                            (pseudo-termp projection)
                            (type-options-p options)
                            (good-typed-term-list-p tterm-lst options))))
          (mv (make-typed-term-list)
              (pseudo-term-fix projection)))
         ((typed-term-list ttl) tterm-lst)
         ((unless (typed-term-list-consp ttl)) (mv ttl ''t))
         ((mv tt-car proj-car)
          (term-projection (typed-term-list->car ttl options)
                           path-cond projection names options state))
         ((typed-term tta) tt-car)
         ((mv tt-cdr proj-cdr)
          (term-list-projection (typed-term-list->cdr ttl options)
                                path-cond projection names options state))
         ((typed-term ttd) tt-cdr)
         ((unless (mbt (equal tta.path-cond ttd.path-cond)))
          (mv ttl ''t)))
      (mv (typed-term-list->cons tt-car tt-cdr options)
          `(if ,proj-car ,proj-cdr 'nil))))
  )

(verify-guards term-projection)
