;; Copyright (C) 2015, University of British Columbia
;; Written (originally) by Yan Peng (Canada Day, 2019)
;;
;; License: A 3-clause BSD license.
;; See the LICENSE file distributed with ACL2

(in-package "SMT")
(include-book "centaur/fty/top" :dir :system)
(include-book "xdoc/top" :dir :system)
(include-book "std/util/define" :dir :system)

(include-book "translate-constant")
(include-book "fixtype-precond-template")

(local (in-theory (enable int-to-rat-p
                          string-or-symbol-p
                          word-p)))

;; -------------------------------------------------------
;; translate a type name
(define translate-type ((type symbolp)
                        (sym symbolp)
                        (int-to-rat int-to-rat-p)
                        (fixinfo smt-fixtype-info-p))
  :returns (translated word-p)
  (b* ((type (symbol-fix type))
       (name (name-of-recognizer type fixinfo))
       (itr (int-to-rat-fix int-to-rat))
       (kind (int-to-rat-kind itr))
       (item (cond ((and (equal name 'integer)
                         (or (and (equal kind :switch)
                                  (equal (int-to-rat-switch->okp itr) 't))
                             (and (equal kind :symbol-list)
                                  (member-equal sym
                                                (int-to-rat-symbol-list->lst
                                                 itr)))))
                    (assoc-equal 'rational *SMT-types*))
                   (t (assoc-equal name *SMT-types*))))
       ((unless (endp item)) (cdr item)))
    (str::downcase-string (lisp-to-python-names name))))

;; -------------------------------------------------------
;; translate a type declaration
(define translate-declaration ((name symbolp) (type symbolp)
                               (int-to-rat int-to-rat-p)
                               (fixinfo smt-fixtype-info-p))
  :returns (translated paragraph-p)
  (b* ((name (symbol-fix name))
       (type (symbol-fix type))
       (translated-name (translate-symbol name))
       (translated-type
        (translate-type type name int-to-rat fixinfo)))
    `(,translated-name = "z3.Const" #\( #\' ,translated-name #\' #\, #\Space
                       ,translated-type #\) #\Newline)))

(define translate-type-decl-list ((type-decl-lst decl-list-p)
                                  (fixinfo smt-fixtype-info-p)
                                  (int-to-rat int-to-rat-p))
  :returns (translated paragraph-p)
  :measure (len type-decl-lst)
  (b* ((type-decl-lst (decl-list-fix type-decl-lst))
       ((unless (consp type-decl-lst)) nil)
       ((cons first rest) type-decl-lst)
       ((decl d) first)
       ((hint-pair h) d.type)
       ((unless (type-decl-p h.thm fixinfo))
        (er hard? 'translate-type=>translate-type-decl-list
            "Type theorem is not a type-decl-p: ~q0"
            h.thm))
       (translated-type-decl
        (translate-declaration d.name (car h.thm) int-to-rat fixinfo)))
    (cons translated-type-decl
          (translate-type-decl-list rest fixinfo int-to-rat))))

;; -------------------------------------------------------
;; translate symbol type
(local
 (defthm paragraph-p-of-car-of-string-list-fix
   (paragraph-p (car (str::string-list-fix symbols)))
   :hints (("Goal" :in-theory (e/d (paragraph-p word-p str::string-list-fix)
                                   ()))))
 )

(define translate-symbol-declare ((symbols string-listp))
  :returns (translated paragraph-p)
  :measure (len symbols)
  (b* ((symbols (str::string-list-fix symbols))
       ((unless (consp symbols)) nil)
       ((cons first rest) symbols))
    (cons `(,first " = Symbol_z3.intern('" ,first "')" #\Newline)
          (translate-symbol-declare rest))))

(define translate-symbol-enumeration ((symbols string-listp))
  :returns (translated paragraph-p)
  (b* ((datatype-line '("Symbol_z3 = _SMT_.Symbol()" #\Newline))
       (declarations (translate-symbol-declare symbols)))
    `(,datatype-line
      ,@declarations)))

;; -------------------------------------------------------
;; translate fixtype definition
;; translation template
(define translate-abstract-template ((name paragraph-p))
  :returns (translated paragraph-p)
  (b* ((name (paragraph-fix name)))
    `(,name " = DeclareSort('" ,name "')" #\Newline)))

(define translate-array-template ((name paragraph-p)
                                  (key-type paragraph-p)
                                  (val-type paragraph-p))
  :returns (translated paragraph-p)
  (b* ((name (paragraph-fix name))
       (key-type (paragraph-fix key-type))
       (val-type (paragraph-fix val-type)))
    `(,name " = ArraySort(" ,key-type ", " ,val-type ")" #\Newline)))

(define translate-destructor-template ((destructor paragraph-p)
                                       (return-type paragraph-p))
  :returns (translated paragraph-p)
  (b* ((destructor (paragraph-fix destructor))
       (return-type (paragraph-fix return-type)))
    `("('" ,destructor "', " ,return-type ")")))

(define translate-prod-template ((name paragraph-p)
                                 (constructor paragraph-p)
                                 (destructor-list paragraph-p))
  :returns (translated paragraph-p)
  (b* ((name (paragraph-fix name))
       (constructor (paragraph-fix constructor))
       (destructor-list (paragraph-fix destructor-list)))
    `(,name ".declare('" ,constructor "', " ,destructor-list ")" #\Newline)))

(define translate-sum-template ((name paragraph-p)
                                (prod-list-line paragraph-p))
  :returns (translated paragraph-p)
  (b* ((name (paragraph-fix name))
       (prod-list-line (paragraph-fix prod-list-line))
       (declare-line
        `(,name "= z3.Datatype" #\( #\' ,name #\' #\) #\Newline))
       (create-line `(,name " = " ,name ".create()" #\Newline)))
    `(,declare-line
      ,prod-list-line
      ,create-line)))

(define translate-array ((name symbolp)
                         (smt-type smt-type-p)
                         (int-to-rat int-to-rat-p)
                         (precond pseudo-term-listp)
                         (fixinfo smt-fixtype-info-p))
  :returns (mv (translated-fixtypes paragraph-p)
               (fixtype-precond pseudo-term-listp))
  :guard (equal (smt-type-kind smt-type) :array)
  (b* ((name (symbol-fix name))
       (smt-type (smt-type-fix smt-type))
       ((smt-type-array a) smt-type)
       (name-str (translate-symbol name))
       (key-type (translate-type a.key-type name int-to-rat fixinfo))
       (val-type (translate-type a.val-type name int-to-rat fixinfo))
       (translated (translate-array-template name-str key-type val-type))
       (precond (precond-array name smt-type int-to-rat precond)))
    (mv translated precond)))

(define translate-constructor ((constructor smt-function-p))
  :returns (translated paragraph-p)
  (b* ((constructor (smt-function-fix constructor))
       ((smt-function f) constructor))
    (translate-symbol f.name)))

(define translate-destructor-list ((name symbolp)
                                   (destructors smt-function-list-p)
                                   (fixinfo smt-fixtype-info-p)
                                   (int-to-rat int-to-rat-p))
  :returns (translated paragraph-p)
  :measure (len destructors)
  (b* ((name (symbol-fix name))
       (destructors (smt-function-list-fix destructors))
       (fixinfo (smt-fixtype-info-fix fixinfo))
       (int-to-rat (int-to-rat-fix int-to-rat))
       ((unless (consp destructors)) nil)
       ((cons first rest) destructors)
       ((unless (consp rest))
        (translate-destructor-template
         (translate-symbol (smt-function->name first))
         (translate-type (return-type-of-function first fixinfo)
                         name int-to-rat fixinfo)))
       (destructor (translate-symbol (smt-function->name first)))
       (return-type
        (translate-type (return-type-of-function first fixinfo)
                        name int-to-rat fixinfo))
       (translated-destructor
        (translate-destructor-template destructor return-type))
       (translated-destructor-list
        (translate-destructor-list name rest fixinfo int-to-rat)))
    `(,translated-destructor ", " ,translated-destructor-list)))

(define translate-prod ((name symbolp)
                        (prod prod-p)
                        (fixinfo smt-fixtype-info-p)
                        (int-to-rat int-to-rat-p)
                        (precond pseudo-term-listp))
  :returns (mv (translated-fixtypes paragraph-p)
               (fixtype-precond pseudo-term-listp))
  (b* ((name (symbol-fix name))
       (fixinfo (smt-fixtype-info-fix fixinfo))
       (prod (prod-fix prod))
       ((prod p) prod)
       (constructor (translate-constructor p.constructor))
       (destructor-list
        (translate-destructor-list name p.destructors fixinfo int-to-rat))
       (translated (translate-prod-template name constructor destructor-list))
       (new-precond (precond-prod name prod int-to-rat precond)))
    (mv translated new-precond)))

(define translate-prod-list ((name symbolp)
                             (prod-list prod-list-p)
                             (fixinfo smt-fixtype-info-p)
                             (int-to-rat int-to-rat-p)
                             (precond pseudo-term-listp))
  :returns (mv (translated-fixtypes paragraph-p)
               (fixtype-precond pseudo-term-listp))
  :measure (len prod-list)
  (b* ((name (symbol-fix name))
       (prod-list (prod-list-fix prod-list))
       (fixinfo (smt-fixtype-info-fix fixinfo))
       (precond (pseudo-term-list-fix precond))
       ((unless (consp prod-list)) (mv nil precond))
       ((cons first rest) prod-list)
       ((mv first-translated first-precond)
        (translate-prod name first fixinfo int-to-rat precond))
       ((mv rest-translated rest-precond)
        (translate-prod-list name rest fixinfo int-to-rat first-precond)))
    (mv (cons first-translated rest-translated)
        rest-precond)))

(define translate-sum ((name symbolp)
                       (smt-type smt-type-p)
                       (fixinfo smt-fixtype-info-p)
                       (int-to-rat int-to-rat-p)
                       (precond pseudo-term-listp))
  :returns (mv (translated-fixtypes paragraph-p)
               (fixtype-precond pseudo-term-listp))
  :guard (equal (smt-type-kind smt-type) :sum)
  (b* ((name (symbol-fix name))
       (fixinfo (smt-fixtype-info-fix fixinfo))
       (smt-type (smt-type-fix smt-type))
       ((smt-type-sum s) smt-type)
       (name-str (translate-symbol name))
       ((mv prod-list-line precond-prods)
        (translate-prod-list name s.prods fixinfo int-to-rat precond))
       (translated (translate-sum-template name-str prod-list-line))
       (precond-all (precond-sum name smt-type int-to-rat precond-prods)))
    (mv translated precond-all)))

(define translate-fixtype ((fixtype smt-fixtype-p)
                           (fixinfo smt-fixtype-info-p)
                           (int-to-rat int-to-rat-p)
                           (precond-acc pseudo-term-listp))
  :returns (mv (translated-fixtypes paragraph-p)
               (fixtype-precond pseudo-term-listp))
  (b* ((fixtype (smt-fixtype-fix fixtype))
       (fixinfo (smt-fixtype-info-fix fixinfo))
       (int-to-rat (int-to-rat-fix int-to-rat))
       (precond-acc (pseudo-term-list-fix precond-acc))
       ((smt-fixtype f) fixtype)
       (kind (smt-type-kind f.kind)))
    (case kind
      (:abstract (mv (translate-abstract-template (translate-symbol f.name))
                     precond-acc))
      (:array (translate-array f.name f.kind int-to-rat precond-acc fixinfo))
      (:sum (translate-sum f.name f.kind fixinfo int-to-rat precond-acc))
      (t (mv nil precond-acc)))))

(define translate-fixtype-list ((fixtypes smt-fixtype-list-p)
                                (fixinfo smt-fixtype-info-p)
                                (int-to-rat int-to-rat-p)
                                (precond-acc pseudo-term-listp)
                                (seen symbol-listp))
  :returns (mv (translated-fixtypes paragraph-p)
               (fixtype-precond pseudo-term-listp))
  :measure (len fixtypes)
  (b* ((fixtypes (smt-fixtype-list-fix fixtypes))
       (fixinfo (smt-fixtype-info-fix fixinfo))
       (precond-acc (pseudo-term-list-fix precond-acc))
       ((unless (consp fixtypes)) (mv nil precond-acc))
       ((cons first rest) fixtypes)
       ((smt-fixtype f) first)
       ((if (member-equal f.name seen))
        (translate-fixtype-list rest fixinfo int-to-rat precond-acc seen))
       ((if (equal f.basicp t))
        (translate-fixtype-list rest fixinfo int-to-rat precond-acc seen))
       ((mv first-translated first-precond)
        (translate-fixtype first fixinfo int-to-rat precond-acc))
       ((mv rest-translated rest-precond)
        (translate-fixtype-list rest fixinfo
                                int-to-rat first-precond (cons f.name seen))))
    (mv (cons first-translated rest-translated) rest-precond)))
